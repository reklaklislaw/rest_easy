import openlibrary.def

+doc: | 
    OpenLibrary 

    Open Library is an open, editable library catalog, 
    building towards a web page for every book ever published.

    
    Documentation:
      http://openlibrary.org/developers/api

+hostname: 'openlibrary.org'
+protocol: https
+port: 443

+children:  
  Query:
    +http_method: GET
    +path: '/query.json?query={0}'
    +input_format: json
    +output_format: application/json
    +children:         
      author:
        +mode: S+K+V
        +scope:
          type: '/type/author'
        +children:
          name: *name
          easternOrder: *easternorder
          personalName: *personalname
          enumeration: *enumeration
          title: *title
          alternateNames: *alternatenames
          uris: *uris
          bio: *bio
          location: *location
          birthDate: *birthdate
          deathDate: *deathdate
          date: *date
          wikipedia: *wikipedia
          links: *links

      about:
        +mode: S+K+V
        +scope: 
          type: '/type/about'
        +children:
          title: *title
          body: *body

      #author_role:
      #  +mode: S+K+V
      #  +prefix: 'type=/type/author_role'
      #  +children:
      #    author: *author
      #    role: *role
      #    as: *as

      collection:
        +mode: S+K+V
        +scope: 
          type: '/type/collection'
        +children:
          name: *name

      content:
        +mode: S+K+V
        +scope: 
          type: '/type/content'
        +children:
          title: *title
          body: *body

      #contribution:
      #  parameters:
      #    role: ' '
      #    contributor: ' '

      doc:
        +mode: S+K+V
        +scope: 
          type: '/type/doc'
        +children:
          title: *title
          body: *body

      edition:
        +mode: S+K+V
        +scope: 
          type: '/type/edition'
        +children:
          title: *title
          titlePrefix: *title-prefix
          subtitle: *subtitle
          otherTitles: *othertitles
          authors: *authors
          byStatement: *bystatement
          publishDate: *publishdate
          copyrightDate: *copyrightdate
          editionName: *editionname
          languages: *languages

          #NOT INDEXED
          #description:' '
          #notes of type /type/text
          genres: *genres

          tableOfContents: *tableofcontents

          #work_titles: []
          #series: []
          #physical_dimensions: ' '
          #physical_format: ' '
          #number_of_pages: ' '
          #subjects: []
          #pagination: ' '
          #lccn: []
          #ocaid: ' '
          #oclc_numbers: []
          #isbn_10: [] 
          #isbn_13: [] 
          #dewey_decimal_class: [] 
          #lc_classifications: [] 
          #contributions: [] 
          #publish_places: [] 
          #publish_country: ' '
          #publishers: []
          #distributors: []
          #NOT INDEXED
          #first_sentence: ' '
          #weight: ' '
          #location: []
          #scan_on_demand: ' '

          #collections: [] of type /type/collection

          #uris: []
          #uri_descriptions: []
          #translation_of: ' '
          #works: []
          #source_records: []

          #translated_from[] of type /type/language

          #scan_records[] of type /type/scan_record
          #volumes[] of type /type/volume

          #accompanying_material: ' '

      limit: *std-limit
      offset: 
        +key: offset 
        +expected_value: '[0-9]+'
      return_all: 
        +key: "*"
        +expected_value: Null

  Search:
    +http_method: GET
    +path: '/search.json?{0}'
    +input_format: key_value
    +output_format: application/json
    +children: 
      search: 
        +children: 
          q:
            +key: 'q'
            +expected_value: str
          title:
            +key: 'title'
            +expected_value: str
          author:
            +key: 'author'
            +expected_value: str
          subject:
            +key: 'subject'
            +expected_value: str  

  Books:
    +http_method: GET
    +path: '/api/books?{0}{format}{callback}{jscmd}'
    +input_format: key_value
    +output_format: javascript
    +children: 
      id: 
        +mode: P+K+MV+A
        +prefix: 'bibkeys'
        +syntax: 
          +multi: ','
          +args: ':'
        +children: *libidsup

      format:
        +key: format
        +expected_value: '^(json|javascript)$'
      
      callback: *std-callback
      
      jscmd:
        +key: jscmd
        +expected_value: '^(viewapi|data)$'
        
  VolumesBrief:
    +http_method: GET
    +path: '/api/volumes/brief/{0}.json?{callback}'
    +input_format: key_value
    +output_format: application/json
    +children: 
      id: 
        +syntax:
          +bind: '/'
          +chain: ''
        +children: *libidslow

      callback: *std-callback 
            
  MultiVolumesBrief: 
    +http_method: GET
    +path: '/api/volumes/brief/json/{0}&{callback}'
    +input_format: key_value
    +output_format: application/json
    +children: 
      id: 
        +mode: MK+MV
        +syntax:
          +bind: ':'
          +chain: ';'
          +multi: '|'
        +children: *libidslow

      callback: *std-callback
            
  VolumesFull: 
    +http_method: GET
    +path: '/api/volumes/full/{0}.json?{callback}'
    +input_format: key_value
    +output_format: application/json
    +children: 
      id: 
        +syntax:
          +bind: '/'
          +chain: ''
        +children: *libidslow
      
      callback: *std-callback            

  MultiVolumesFull:
    +http_method: GET
    +path: '/api/volumes/full/json/{0}&{callback}'
    +input_format: key_value
    +output_format: application/json
    +children: 
      id: 
        +mode: MK+MV
        +children: *libidslow
        +syntax:
          +bind: ':'
          +chain: ';'
          +multi: '|'

      callback: *std-callback
      


